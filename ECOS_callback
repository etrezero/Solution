import pandas as pd
from datetime import datetime
from dateutil.relativedelta import relativedelta
import requests
from dash import Dash, dcc, html, Input, Output, State
import plotly.graph_objects as go



# ECOS API 키 설정
ECOS_API_KEY = ''

# ECOS API 호출 함수
def fetch_ecos_data(stat_code, term, item_code1, start, end):
    if term == 'A':
        start_date = start.strftime('%Y')
        end_date = end.strftime('%Y')
    elif term == 'Q':
        start_date = start.strftime('%Y') + 'Q' + str((start.month - 1) // 3 + 1)
        end_date = end.strftime('%Y') + 'Q' + str((end.month - 1) // 3 + 1)
    elif term == 'M':
        start_date = start.strftime('%Y%m')
        end_date = end.strftime('%Y%m')
    elif term == 'D':
        start_date = start.strftime('%Y%m%d')
        end_date = end.strftime('%Y%m%d')
    else:
        raise ValueError("Invalid term. Use 'A', 'Q', 'M', or 'D'.")
    
    url = (
        f"http://ecos.bok.or.kr/api/StatisticSearch/"
        f"{ECOS_API_KEY}/json/kr/1/100/"
        f"{stat_code}/{term}/{start_date}/{end_date}/{item_code1}"
    )
    
    try:
        response = requests.get(url, verify=False)
        response.raise_for_status()
        data = response.json()
        if 'StatisticSearch' in data:
            rows = data['StatisticSearch']['row']
            df = pd.DataFrame(rows)
            df['TIME'] = pd.to_datetime(df['TIME'])
            df.set_index('TIME', inplace=True)
            df = df[['DATA_VALUE']].astype(float)
            return df
        else:
            print("No data found in response.")
            return None
    except Exception as e:
        print(f"Error fetching ECOS data: {e}")
        return None

# 여러 지표 데이터를 병합하는 함수
def fetch_and_merge_ecos_data(item_dict, term, start, end):
    merged_df = pd.DataFrame()
    for stat_code, items in item_dict.items():
        for item_code1, column_name in items:
            df = fetch_ecos_data(stat_code, term, item_code1, start, end)
            if df is not None:
                df.rename(columns={'DATA_VALUE': column_name}, inplace=True)
                if merged_df.empty:
                    merged_df = df
                else:
                    merged_df = pd.merge(merged_df, df, left_index=True, right_index=True, how='outer')
    return merged_df

# Dash 앱 초기화
app = Dash(__name__)
app.title = "ECOS Data Viewer"

# 레이아웃
app.layout = html.Div(
    style={'display': 'flex', 'flexDirection': 'row', 'height': '100vh'},
    children=[
        # 왼쪽: ECOS 데이터 입력 및 그래프
        html.Div(
            style={'width': '50%', 'padding': '20px', 'boxSizing': 'border-box', 'overflowY': 'auto'},
            children=[
                html.H1("ECOS Data Viewer", style={'textAlign': 'center'}),
                html.Div([
                    html.Label("Stat Code:"),
                    dcc.Input(id='stat-code', type='text', placeholder='Enter stat code', value='902Y015'),
                    html.Label("Term:"),
                    dcc.Dropdown(
                        id='term',
                        options=[{'label': term, 'value': term} for term in ['A', 'Q', 'M', 'D']],
                        value='Q'
                    ),
                    html.Label("Item Code 1:"),
                    dcc.Input(id='item-code1', type='text', placeholder='Enter item code', value='AUS'),
                    html.Label("Start Date:"),
                    dcc.DatePickerSingle(id='start-date', date=(datetime.today() - relativedelta(years=10)).strftime('%Y-%m-%d')),
                    html.Label("End Date:"),
                    dcc.DatePickerSingle(id='end-date', date=(datetime.today() - relativedelta(months=1)).strftime('%Y-%m-%d')),
                    html.Button("Add to Item Dict", id='add-item', n_clicks=0),
                    html.Button("Fetch Data", id='fetch-data', n_clicks=0),
                    html.Button("Reset Dictionary", id='reset-dict', n_clicks=0, style={'backgroundColor': 'red', 'color': 'white'}),
                ]),
                html.Div(id='item-dict-display', style={'marginTop': '20px'}),
                dcc.Graph(id='data-graph', style={'marginTop': '20px'}),
            ]
        ),



        # 오른쪽: 외부 웹페이지 임베드
        html.Div(
            style={'width': '50%', 'padding': '20px', 'boxSizing': 'border-box', 'overflowY': 'auto'},
            children=[
                html.H1("ECOS API Documentation", style={'textAlign': 'center'}),
                html.Iframe(
                    src="https://ecos.bok.or.kr/api/#/DevGuide/StatisticalCodeSearch",
                    style={'width': '90%', 'height': '90vh', 'border': 'none'}
                )
            ]
        )
    ]
)

# State를 통한 데이터 저장
item_dict = {}


# 콜백: 아이템 딕셔너리 저장
@app.callback(
    Output('item-dict-display', 'children'),
    [Input('add-item', 'n_clicks')],
    [State('stat-code', 'value'), State('term', 'value'), State('item-code1', 'value')]
)
def update_item_dict(n_clicks, stat_code, term, item_code1):
    if n_clicks > 0:
        if stat_code not in item_dict:
            item_dict[stat_code] = []
        item_dict[stat_code].append((item_code1, f"Data ({item_code1})"))
    return html.Pre(str(item_dict))






# 콜백: 데이터 가져오기 및 그래프 생성
@app.callback(
    Output('data-graph', 'figure'),
    [Input('fetch-data', 'n_clicks')],
    [State('start-date', 'date'), State('end-date', 'date'), State('term', 'value')]
)
def fetch_and_display_data(n_clicks, start_date, end_date, term):
    if n_clicks > 0:
        start = datetime.strptime(start_date, '%Y-%m-%d')
        end = datetime.strptime(end_date, '%Y-%m-%d')
        merged_data = fetch_and_merge_ecos_data(item_dict, term, start, end)
        if merged_data is not None:
            fig = go.Figure()
            for column in merged_data.columns:
                fig.add_trace(go.Scatter(x=merged_data.index, y=merged_data[column], mode='lines', name=column))
            fig.update_layout(title="Merged Data", xaxis_title="Date", yaxis_title="Value", template="plotly_white")
            return fig
    return go.Figure()

# 앱 실행
if __name__ == "__main__":
    app.run_server(debug=False, host='0.0.0.0')
