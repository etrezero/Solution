import pymysql
import pandas as pd
import dash
from dash import dcc, html, Input, Output, State, dash_table
from datetime import datetime
from dateutil.relativedelta import relativedelta
import json
import os
from openpyxl import Workbook
import plotly.graph_objs as go



# JSON 파일 경로
Path_DB_json = r'C:\Covenant\data\0.DB_Table.json'


# JSON 파일을 읽어 DataFrame으로 변환
with open(Path_DB_json, 'r', encoding='utf-8') as f:
    data = json.load(f)
    df_db = pd.DataFrame(data)

df_db = df_db[['테이블한글명', '테이블영문명', '칼럼명(한글)', '칼럼명(영문)']]



# 드롭다운 목록 생성
table_options = [{'label': row['테이블한글명'], 'value': row['테이블영문명']} for index, row in df_db.iterrows()]
table_options = list({v['value']: v for v in table_options}.values())




app = dash.Dash(__name__)
app.title = 'DB_mySQL_TDF_설정액'
server = app.server



app.layout = html.Div(
    style={'width': '80%', 'margin': 'auto'},
    children=[

        dcc.Dropdown(
            id='table-dropdown',
            options=table_options,
            value=next((option['value'] for option in table_options if option['label'] == '판매사별 설정현황'), None),
            style={'width': '50%', 'margin': '10px'}
        ),
        dcc.Dropdown(
            id='column-dropdown',
            multi=True,
            value=[
                    'TR_YMD',
                    'UNYONG_NM',
                    'PM_NM',
                    'FUND_NM',
                    'FUND_CD',
                    'UY_BSY',
                    'AMT',
            ],
            placeholder='Table 컬럼 선택(중복가능)',
            style={'width': '50%', 'margin': '10px'}
        ),
        dcc.DatePickerRange(
            id='date-picker-range',
            start_date=(datetime.today() - relativedelta(years=1)).replace(month=12, day=29).strftime('%Y-%m-%d'),
            end_date=datetime.today().strftime('%Y-%m-%d'),
            display_format='YYYYMMDD',
            style={'width': '50%', 'margin-left': '19px'}
        ),
        dcc.Dropdown(
            id='string-filter-column-dropdown',
            placeholder='문자열 조건 적용할 컬럼',
            style={'width': '50%', 'margin': '10px'}
        ),
        dcc.Input(
            id='filter-input',
            type='text',
            placeholder='포함할 문자열(콤마로구분)',
            style={'width': '30%', 'margin': '10px auto'}
        ),
        dcc.Input(
            id='exclude-input',
            type='text',
            placeholder='제외할 문자열',
            style={'width': '30%', 'margin': '10px auto'}
        ),
        html.Button('쿼리 실행', id='execute-query', n_clicks=0, style={'width': '30%', 'margin': '10px auto'}),
        html.Button('엑셀로 다운로드', id='download-excel', n_clicks=0, style={'width': '30%', 'margin': '10px auto'}),
        dcc.Download(id="download"),

        # 기존 db-table 유지
        dash_table.DataTable(
            id='db-table',
            columns=[{"name": col, "id": col} for col in df_db.columns],
            data=df_db.to_dict('records'),
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={'backgroundColor': 'white', 'fontWeight': 'bold'},
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),

        html.Div(style={'height': '40px'}),


        # 상태 관리를 위한 Store 컴포넌트
        dcc.Store(id='df-store'),


        dash_table.DataTable(
            id='query-result-table',
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={'backgroundColor': 'white', 'fontWeight': 'bold'},
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),



        html.Div(id='pivot-table-output'),  # 피벗 테이블 결과를 보여줄 영역 추가


    ]
)

# 컬럼과 테이블 데이터를 업데이트하는 콜백 함수 (db-table 유지)
@app.callback(
    [Output('column-dropdown', 'options'),
     Output('db-table', 'data')],
    [Input('table-dropdown', 'value')]
)
def update_columns_and_table(selected_table):
    if selected_table is None:
        return [], []

    filtered_df = df_db[df_db['테이블영문명'] == selected_table]
    column_options = [{'label': row['칼럼명(한글)'], 'value': row['칼럼명(영문)']} for index, row in filtered_df.iterrows()]

    return column_options, filtered_df.to_dict('records')

# 데이터를 저장하는 Store에 데이터프레임 저장
@app.callback(
    Output('df-store', 'data'),
    Input('execute-query', 'n_clicks'),
    [State('table-dropdown', 'value'),
     State('column-dropdown', 'value'),
     State('date-picker-range', 'start_date'),
     State('date-picker-range', 'end_date'),
     State('string-filter-column-dropdown', 'value'),
     State('filter-input', 'value'),
     State('exclude-input', 'value')]
)
def update_table(n_clicks, selected_table, selected_columns, start_date, end_date, filter_column, include_str, exclude_str):
    if n_clicks == 0 or not selected_table or not selected_columns:
        return None

    connection = pymysql.connect(
        host='192.000.000.00',
        user='000000',
        password='000000',
        database='dt',
        port=3306,
        cursorclass=pymysql.cursors.DictCursor
    )

    def execute_query(query):
        try:
            with connection.cursor() as cursor:
                cursor.execute(query)
                result = cursor.fetchall()
                return pd.DataFrame(result)
        except Exception as e:
            print(f"Error executing query: {e}")
            return None

    try:
        # 쿼리 생성 (최신 데이터와 start_date로 주어진 데이터를 모두 가져오는 쿼리)
        query = f"""
            SELECT {', '.join(selected_columns)} 
            FROM {selected_table} 
            WHERE 
            (
            {selected_columns[0]} = (SELECT MAX({selected_columns[0]}) FROM {selected_table})
            OR {selected_columns[0]} = '{start_date.replace('-', '')}'
            )
            AND (FUND_NM LIKE '%TDF%' OR FUND_NM LIKE '%TIF%');
        """

        if include_str:
            include_conditions = [f"{filter_column} LIKE '%{inc}%'" for inc in include_str.split(',')]
            query += " AND " + " OR ".join(include_conditions)
        if exclude_str:
            exclude_conditions = [f"{filter_column} NOT LIKE '%{exc}%'" for exc in exclude_str.split(',')]
            query += " AND " + " OR ".join(exclude_conditions)

        df_select = execute_query(query)
        connection.close()

        if df_select is not None:
            return df_select.to_dict('records')  # JSON 형태로 저장
        else:
            return None

    except Exception as e:
        print(f"Error executing query: {e}")
        connection.close()
        return None


# 데이터를 테이블에 표시
@app.callback(
    [Output('query-result-table', 'columns'),
     Output('query-result-table', 'data')],
    Input('df-store', 'data')
)
def update_table_display(data):
    if data is None:
        return [], []

    df = pd.DataFrame(data)
    columns = [{"name": col, "id": col} for col in df.columns]
    return columns, df.to_dict('records')




# 피벗 테이블 생성 및 출력
@app.callback(
    Output('pivot-table-output', 'children'),
    Input('df-store', 'data')
)
def generate_pivot_table(data):
    if data is None:
        return "pivot table 데이터 없음"

    df = pd.DataFrame(data)
    


    #빈티지 열을 추가하여 빈티지 표시
    df.loc[df['FUND_NM'].str.contains('TIF'), '빈티지'] = 'TIF'
    df.loc[df['FUND_NM'].str.contains('2030'), '빈티지'] = '2030'
    df.loc[df['FUND_NM'].str.contains('2035'), '빈티지'] = '2035'
    df.loc[df['FUND_NM'].str.contains('2040'), '빈티지'] = '2040'
    df.loc[df['FUND_NM'].str.contains('2045'), '빈티지'] = '2045'
    df.loc[df['FUND_NM'].str.contains('2050'), '빈티지'] = '2050'
    df.loc[df['FUND_NM'].str.contains('2055'), '빈티지'] = '2055'
    df.loc[df['FUND_NM'].str.contains('2060'), '빈티지'] = '2060'
    df.loc[~df['FUND_NM'].str.contains('2030|2035|2040|2045|2050|2055|2060|TIF'), '빈티지'] = '기타'


    #특수 (포커스 - TRP)
    df.loc[df['FUND_NM'].str.contains('포커스'), '특수'] = '포커스'
    df.loc[df['FUND_NM'].str.contains('한국투자') & ~df['FUND_NM'].str.contains('포커스'), '특수'] = 'TRP'


    #디폴트 열을 추가하여 O표시
    df.loc[df['FUND_NM'].str.contains('O'), '디폴트'] = 'O'

    #운용보수 금액(천분율 보수율이어서 1000으로 나눔)
    df['운용보수금액'] = (df['AMT'] * df['UY_BSY']/1000)
    print(df[['AMT', 'UY_BSY', '운용보수금액']].head())

    # save_excel(df, 'df', index_option=False)

    



    # 판매사별 ==========================================================
    PV_판매사설정액 = df.pivot_table(
        index='TR_YMD', 
        columns='PM_NM', 
        values='AMT', 
        aggfunc='sum', 
        fill_value=0, 
        margins=False
    )
    PV_판매사설정액 = (PV_판매사설정액 / 100000000).round(0)
    PV_판매사설정액.columns = PV_판매사설정액.columns.astype(str)  # 빈티지 숫자를 문자로 변환

    # 인덱스 열(TR_YMD)을 포함하여 테이블로 변환
    
    PV_판매사설정액 = PV_판매사설정액.reset_index()
    PV_판매사설정액['TR_YMD'] = pd.to_datetime(PV_판매사설정액['TR_YMD']).dt.strftime('%Y-%m-%d')
    PV_판매사설정액['합계'] = PV_판매사설정액.drop(columns=['TR_YMD']).sum(axis=1)
        




    # '특수' 열 값이 '포커스'인 행만 df_포커스로 지정
    df_포커스 = df[df['특수'] == '포커스']
    PV_포커스 = df_포커스.pivot_table(
                    index='TR_YMD', 
                    columns='PM_NM', 
                    values='AMT', 
                    aggfunc='sum', 
                    fill_value=0, 
                    margins=False)
    PV_포커스 = (PV_포커스 / 100000000).round(0)
    PV_포커스.columns = PV_포커스.columns.astype(str) #빈티지숫자를 문자로 변환
    PV_포커스 = PV_포커스.reset_index()
    PV_포커스['TR_YMD'] = pd.to_datetime(PV_포커스['TR_YMD']).dt.strftime('%Y-%m-%d')
    PV_포커스['합계'] = PV_포커스.drop(columns=['TR_YMD']).sum(axis=1)
    
    print("PV_포커스=====================", PV_포커스)





    df_TRP = df[df['특수'] == 'TRP']
    PV_TRP = df_TRP.pivot_table(
                    index='TR_YMD', 
                    columns='PM_NM', 
                    values='AMT', 
                    aggfunc='sum', 
                    fill_value=0, 
                    margins=False)
    PV_TRP = (PV_TRP / 100000000).round(0)
    PV_TRP.columns = PV_TRP.columns.astype(str) #빈티지숫자를 문자로 변환
    PV_TRP = PV_TRP.reset_index()
    PV_TRP['TR_YMD'] = pd.to_datetime(PV_TRP['TR_YMD']).dt.strftime('%Y-%m-%d')
    PV_TRP['합계'] = PV_TRP.drop(columns=['TR_YMD']).sum(axis=1)
    
    print("PV_TRP=====================", PV_TRP)

    
   



    # '특수' 열에서 '포커스'를 포함하고, '디폴트' 열에서 'O'를 포함하는 행만 필터링
    포커스_디폴트 = df.loc[(df['특수'].str.contains('포커스')) & (df['디폴트'].str.contains('O'))]
    
    포커스_디폴트 = 포커스_디폴트.pivot_table(
                        index='TR_YMD', 
                        columns='PM_NM', 
                        values='AMT', 
                        aggfunc='sum', 
                        fill_value=0, 
                        margins=False)
    포커스_디폴트 = (포커스_디폴트 / 100000000).round(0)
    포커스_디폴트.columns = 포커스_디폴트.columns.astype(str)  # 빈티지 숫자를 문자로 변환
    포커스_디폴트 = 포커스_디폴트.reset_index()
    포커스_디폴트['TR_YMD'] = pd.to_datetime(포커스_디폴트['TR_YMD']).dt.strftime('%Y-%m-%d')
    포커스_디폴트['합계'] = 포커스_디폴트.drop(columns=['TR_YMD']).sum(axis=1)

    


    # '특수' 열에서 '포커스'를 포함하고, '디폴트' 열에서 'O'를 포함하는 행만 필터링
    TRP_디폴트 = df.loc[(df['특수'].str.contains('TRP')) & (df['디폴트'].str.contains('O'))]
    

    TRP_디폴트 = TRP_디폴트.pivot_table(
                        index='TR_YMD', 
                        columns='PM_NM', 
                        values='AMT', 
                        aggfunc='sum', 
                        fill_value=0, 
                        margins=False)
    TRP_디폴트 = (TRP_디폴트 / 100000000).round(0)
    TRP_디폴트.columns = TRP_디폴트.columns.astype(str)  # 빈티지 숫자를 문자로 변환
    TRP_디폴트 = TRP_디폴트.reset_index()
    TRP_디폴트['TR_YMD'] = pd.to_datetime(TRP_디폴트['TR_YMD']).dt.strftime('%Y-%m-%d')
    TRP_디폴트['합계'] = TRP_디폴트.drop(columns=['TR_YMD']).sum(axis=1)






    # '특수' 열에서 '포커스'를 포함하고, '디폴트' 열에서 'O'를 포함하는 행만 필터링
    판매사_디폴트 = df.loc[df['디폴트'].str.contains('O', na=False)]
    
    판매사_디폴트 = 판매사_디폴트.pivot_table(
                        index='TR_YMD', 
                        columns='PM_NM', 
                        values='AMT', 
                        aggfunc='sum', 
                        fill_value=0, 
                        margins=False)
    판매사_디폴트 = (판매사_디폴트 / 100000000).round(0)
    판매사_디폴트.columns = 판매사_디폴트.columns.astype(str)  # 빈티지 숫자를 문자로 변환
    판매사_디폴트 = 판매사_디폴트.reset_index()
    판매사_디폴트['TR_YMD'] = pd.to_datetime(판매사_디폴트['TR_YMD']).dt.strftime('%Y-%m-%d')
    판매사_디폴트['합계'] = 판매사_디폴트.drop(columns=['TR_YMD']).sum(axis=1)





    # 운용사별 ==========================================================

    
    # 전체 운용사별 집계
    PV_운용사설정액 = df.pivot_table(
        index='TR_YMD', 
        columns='UNYONG_NM', 
        values='AMT', 
        aggfunc='sum', 
        fill_value=0, 
        margins=False
    )
    PV_운용사설정액 = (PV_운용사설정액 / 100000000).round(0)
    PV_운용사설정액.columns = PV_운용사설정액.columns.astype(str)  # 빈티지 숫자를 문자로 변환

    # 인덱스 열(TR_YMD)을 포함하여 테이블로 변환
    PV_운용사설정액 = PV_운용사설정액.reset_index()
    PV_운용사설정액['TR_YMD'] = pd.to_datetime(PV_운용사설정액['TR_YMD']).dt.strftime('%Y-%m-%d')
    PV_운용사설정액['합계'] = PV_운용사설정액.drop(columns=['TR_YMD']).sum(axis=1)





        

    # 전체 운용사별 집계
    운용사설정액_포커스 = df_포커스.pivot_table(
        index='TR_YMD', 
        columns='빈티지', 
        values='AMT', 
        aggfunc='sum', 
        fill_value=0, 
        margins=False
    )
    운용사설정액_포커스 = (운용사설정액_포커스 / 100000000).round(0)
    운용사설정액_포커스.columns = 운용사설정액_포커스.columns.astype(str)  # 빈티지 숫자를 문자로 변환

    # 인덱스 열(TR_YMD)을 포함하여 테이블로 변환
    운용사설정액_포커스 = 운용사설정액_포커스.reset_index()
    운용사설정액_포커스['TR_YMD'] = pd.to_datetime(운용사설정액_포커스['TR_YMD']).dt.strftime('%Y-%m-%d')
    운용사설정액_포커스['합계'] = 운용사설정액_포커스.drop(columns=['TR_YMD']).sum(axis=1)

    print("운용사설정액_포커스=====================", 운용사설정액_포커스)






    # 전체 운용사별 집계
    운용사설정액_TRP = df_TRP.pivot_table(
        index='TR_YMD', 
        columns='빈티지', 
        values='AMT', 
        aggfunc='sum', 
        fill_value=0, 
        margins=False
    )
    운용사설정액_TRP = (운용사설정액_TRP / 100000000).round(0)
    운용사설정액_TRP.columns = 운용사설정액_TRP.columns.astype(str)  # 빈티지 숫자를 문자로 변환

    # 인덱스 열(TR_YMD)을 포함하여 테이블로 변환
    운용사설정액_TRP = 운용사설정액_TRP.reset_index()
    운용사설정액_TRP['TR_YMD'] = pd.to_datetime(운용사설정액_TRP['TR_YMD']).dt.strftime('%Y-%m-%d')
    운용사설정액_TRP['합계'] = 운용사설정액_TRP.drop(columns=['TR_YMD']).sum(axis=1)

    print("운용사설정액_TRP=====================", 운용사설정액_TRP)











    # 특수: 포커스 및 디폴트 필터링
    포커스_디폴트_운용사 = df.loc[(df['특수'].str.contains('포커스', na=False)) & (df['디폴트'].str.contains('O', na=False))]

    포커스_디폴트_운용사 = 포커스_디폴트_운용사.pivot_table(
        index='TR_YMD', 
        columns='UNYONG_NM', 
        values='AMT', 
        aggfunc='sum', 
        fill_value=0, 
        margins=False
    )
    포커스_디폴트_운용사 = (포커스_디폴트_운용사 / 100000000).round(0)
    포커스_디폴트_운용사.columns = 포커스_디폴트_운용사.columns.astype(str)  # 빈티지 숫자를 문자로 변환
    포커스_디폴트_운용사 = 포커스_디폴트_운용사.reset_index()
    포커스_디폴트_운용사['TR_YMD'] = pd.to_datetime(포커스_디폴트_운용사['TR_YMD']).dt.strftime('%Y-%m-%d')
    포커스_디폴트_운용사['합계'] = 포커스_디폴트_운용사.drop(columns=['TR_YMD']).sum(axis=1)

    # 특수: TRP 및 디폴트 필터링
    TRP_디폴트_운용사 = df.loc[(df['특수'].str.contains('TRP', na=False)) & (df['디폴트'].str.contains('O', na=False))]

    TRP_디폴트_운용사 = TRP_디폴트_운용사.pivot_table(
        index='TR_YMD', 
        columns='UNYONG_NM', 
        values='AMT', 
        aggfunc='sum', 
        fill_value=0, 
        margins=False
    )
    TRP_디폴트_운용사 = (TRP_디폴트_운용사 / 100000000).round(0)
    TRP_디폴트_운용사.columns = TRP_디폴트_운용사.columns.astype(str)  # 빈티지 숫자를 문자로 변환
    TRP_디폴트_운용사 = TRP_디폴트_운용사.reset_index()
    TRP_디폴트_운용사['TR_YMD'] = pd.to_datetime(TRP_디폴트_운용사['TR_YMD']).dt.strftime('%Y-%m-%d')
    TRP_디폴트_운용사['합계'] = TRP_디폴트_운용사.drop(columns=['TR_YMD']).sum(axis=1)

    # 디폴트 열만 포함한 운용사별 집계
    운용사_디폴트 = df.loc[df['디폴트'].str.contains('O', na=False)]

    운용사_디폴트 = 운용사_디폴트.pivot_table(
        index='TR_YMD', 
        columns='UNYONG_NM', 
        values='AMT', 
        aggfunc='sum', 
        fill_value=0, 
        margins=False
    )
    운용사_디폴트 = (운용사_디폴트 / 100000000).round(0)
    운용사_디폴트.columns = 운용사_디폴트.columns.astype(str)  # 빈티지 숫자를 문자로 변환
    운용사_디폴트 = 운용사_디폴트.reset_index()
    운용사_디폴트['TR_YMD'] = pd.to_datetime(운용사_디폴트['TR_YMD']).dt.strftime('%Y-%m-%d')
    운용사_디폴트['합계'] = 운용사_디폴트.drop(columns=['TR_YMD']).sum(axis=1)

    # # 결과 출력
    # print("포커스_디폴트_운용사=====================", 포커스_디폴트_운용사)
    # print("TRP_디폴트_운용사=====================", TRP_디폴트_운용사)
    # print("운용사_디폴트=====================", 운용사_디폴트)





    # 판매사별 ==========================================================
    운용보수금액 = df.pivot_table(
        index='TR_YMD', 
        columns='UNYONG_NM', 
        values='운용보수금액', 
        aggfunc='sum', 
        fill_value=0, 
        margins=False
    )
    

    운용보수금액 = (운용보수금액 / 100000000).round(0)
    운용보수금액.columns = 운용보수금액.columns.astype(str)  # 컬럼을 문자로 변환

    # 인덱스 열(TR_YMD)을 포함하여 테이블로 변환
    
    운용보수금액 = 운용보수금액.reset_index()
    운용보수금액['TR_YMD'] = pd.to_datetime(운용보수금액['TR_YMD']).dt.strftime('%Y-%m-%d')
    운용보수금액['합계'] = 운용보수금액.drop(columns=['TR_YMD']).sum(axis=1)
        















    return html.Div([
        


    # 운용사별 TDF/TIF 설정액==================================
        html.H4("운용사별 - TDF/TIF 설정액(억원)"),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in PV_운용사설정액.columns],  # 인덱스 열 포함
            data=PV_운용사설정액.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={'backgroundColor': 'white', 'fontWeight': 'bold'},
            style_header_conditional=[
                {
                'if': {'column_id': col},
                'backgroundColor': '#3762AF',
                'color': 'white'
                } for col in PV_운용사설정액.columns if '한국투자' in col or '포커스' in col
            ],
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),






        # ETF 포커스 - 빈티지별 설정액=========================
        html.H4("빈티지별 - ETF 포커스", style={'textAlign': 'center'}), 

        #파이그래프
        dcc.Graph(
            figure=go.Figure(
            data=[
                go.Pie(
                    labels=운용사설정액_포커스.drop('합계', axis=1).columns,
                    values=운용사설정액_포커스.drop('합계', axis=1).iloc[-1],
                    hole=0.3,  # 도넛 모양을 원할 경우 설정
                    textinfo="label+percent",  # 항목 이름과 퍼센트를 그래프에 직접 표시
                    textposition="outside"     # 텍스트를 파이 내부에 표시
                )
            ],
            layout=go.Layout(
                # title="포커스 빈티지별 설정액",
                showlegend=False  # 레전드를 숨김
                )
            )
        ),

        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in 운용사설정액_포커스.columns],  # 인덱스 열 포함
            data=운용사설정액_포커스.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={
                'backgroundColor': '#3762AF', 
                'color':'white', 
                'fontWeight': 'bold'},
            style_header_conditional=[
                {
                'if': {'column_id': col},
                'backgroundColor': '#3762AF',
                'color': 'white'
                } for col in 운용사설정액_포커스.columns if '한국투자' in col or '포커스' in col
            ],
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),
        #============================================================






        # ETF 포커스 - 운용사별 설정액
        html.H4("빈티지별 - TRP", style={'textAlign': 'center'}), 

        
        #파이그래프
        dcc.Graph(
            figure=go.Figure(
            data=[
                go.Pie(
                    labels=운용사설정액_TRP.drop('합계', axis=1).columns,
                    values=운용사설정액_TRP.drop('합계', axis=1).iloc[-1],
                    hole=0.3,  # 도넛 모양을 원할 경우 설정
                    textinfo="label+percent",  # 항목 이름과 퍼센트를 그래프에 직접 표시
                    textposition="outside"     # 텍스트를 파이 내부에 표시
                )
            ],
            layout=go.Layout(
                # title="TRP 빈티지별 설정액",
                showlegend=False  # 레전드를 숨김
                )
            )
        ),

        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in 운용사설정액_TRP.columns],  # 인덱스 열 포함
            data=운용사설정액_TRP.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={
                'backgroundColor': '#3762AF', 
                'color':'white', 
                'fontWeight': 'bold'},
            style_header_conditional=[
                {
                'if': {'column_id': col},
                'backgroundColor': '#3762AF',
                'color': 'white'
                } for col in 운용사설정액_TRP.columns if '한국투자' in col or '포커스' in col
            ],
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),








        # ETF 포커스 - 운용사별 설정액
        html.H4("운용사별 - ETF 포커스 디폴트옵션"),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in 포커스_디폴트_운용사.columns],  # 인덱스 열 포함
            data=포커스_디폴트_운용사.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={
                'backgroundColor': '#3762AF', 
                'color':'white', 
                'fontWeight': 'bold'},
            style_header_conditional=[
                {
                'if': {'column_id': col},
                'backgroundColor': '#3762AF',
                'color': 'white'
                } for col in 포커스_디폴트_운용사.columns if '한국투자' in col or '포커스' in col
            ],
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),



        # TRP - 운용사별 설정액
        html.H4("운용사별 - TRP 디폴트옵션"),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in TRP_디폴트_운용사.columns],  # 인덱스 열 포함
            data=TRP_디폴트_운용사.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={'backgroundColor': 'white', 'fontWeight': 'bold'},
            style_header_conditional=[
                {
                'if': {'column_id': col},
                'backgroundColor': '#3762AF',
                'color': 'white'
                } for col in TRP_디폴트_운용사.columns if '한국투자' in col or '포커스' in col
            ],
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),







        # 운용보수금액
        html.H4("운용보수금액"),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in 운용보수금액.columns],  # 인덱스 열 포함
            data=운용보수금액.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={'backgroundColor': 'white', 'fontWeight': 'bold'},
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),







        html.H4("판매사별 - TDF/TIF 전체(억원)"),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in PV_판매사설정액.columns],  # 인덱스 열 포함
            data=PV_판매사설정액.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={
                'backgroundColor': 'white', 
                'fontWeight': 'bold'},
            style_header_conditional=[
                {
                'if': {'column_id': col},
                'backgroundColor': '#3762AF',
                'color': 'white'
                } for col in PV_판매사설정액.columns if '한국투자' in col or '포커스' in col
            ],
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),


        html.H4("판매사별 - ETF 포커스"),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in PV_포커스.columns],  # 인덱스 열 포함
            data=PV_포커스.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={
                'backgroundColor': '#3762AF', 
                'color':'white', 
                'fontWeight': 'bold'},
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),


        
        html.H4("판매사별 - TRP"),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in PV_TRP.columns],  # 인덱스 열 포함
            data=PV_TRP.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={'backgroundColor': 'white', 'fontWeight': 'bold'},
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),



        html.H4("판매사별 - ETF 포커스 디폴트옵션"),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in 포커스_디폴트.columns],  # 인덱스 열 포함
            data=포커스_디폴트.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={
                'backgroundColor': '#3762AF', 
                'color':'white', 
                'fontWeight': 'bold'},
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),



        html.H4("판매사별 - TRP 디폴트옵션"),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in TRP_디폴트.columns],  # 인덱스 열 포함
            data=TRP_디폴트.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={
                'textAlign': 'left', 
                'padding': '5px', 
                'minWidth': '100px', 
                'maxWidth': '200px', 
                'whiteSpace': 'normal',
                
                },
            style_header={'backgroundColor': 'white', 'fontWeight': 'bold'},
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),


        
        html.H4("판매사별 - 디폴트옵션"),
        dash_table.DataTable(
            columns=[{"name": col, "id": col} for col in 판매사_디폴트.columns],  # 인덱스 열 포함
            data=판매사_디폴트.to_dict('records'),  # 데이터 변환
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left', 'padding': '5px', 'minWidth': '100px', 'maxWidth': '200px', 'whiteSpace': 'normal'},
            style_header={'backgroundColor': 'white', 'fontWeight': 'bold'},
            style_as_list_view=True,
            page_size=15  # 페이지 사이즈 설정
        ),






    ])









#엑셀 저장=======================================================
def save_excel(df, sheetname, index_option=None):
    
    # 파일 경로
    path = rf'C:\Covenant\TDF\data\DB_mySQL_TDF_설정액.xlsx'

    # 파일이 없는 경우 새 Workbook 생성
    if not os.path.exists(path):
        wb = Workbook()
        wb.save(path)
        print(f"새 파일 '{path}' 생성됨.")
    
    # 인덱스를 날짜로 변환 시도
    try:
        # index_option이 None일 경우 인덱스를 포함하고 날짜 형식으로 저장
        if index_option is None or index_option:  # 인덱스를 포함하는 경우
            df.index = pd.to_datetime(df.index, errors='raise')  # 변환 실패 시 오류 발생
            df.index = df.index.strftime('%Y-%m-%d')  # 벡터화된 방식으로 날짜 포맷 변경
            index = True  # 인덱스를 포함해서 저장
        else:
            index = False  # 인덱스를 제외하고 저장
    except Exception:
        print("Index를 날짜 형식으로 변환할 수 없습니다. 기본 인덱스를 사용합니다.")
        index = index_option if index_option is not None else True  # 변환 실패 시에도 인덱스를 포함하도록 설정

    # DataFrame을 엑셀 시트로 저장
    with pd.ExcelWriter(path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, sheet_name=sheetname, index=index)  # index 여부 설정
        print(f"'{sheetname}' 저장 완료.")






# 앱 실행
if __name__ == '__main__':
    app.run_server(debug=False, host='0.0.0.0', port=8050)
