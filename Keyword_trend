import pandas as pd
import numpy as np
import plotly.graph_objs as go
from dash import dcc, html, Dash
import FinanceDataReader as fdr
from pytrends.request import TrendReq
from pandas_datareader import data as pdr
from concurrent.futures import ThreadPoolExecutor, as_completed

# FRED API 키 설정
fred_api_key = "            "

# 데이터 수집
def fetch_trend_data(keyword):
    try:
        pytrends = TrendReq(hl='en-US', tz=360)
        pytrends.build_payload([keyword], cat=0, timeframe='2021-01-01 2024-01-01', geo='US', gprop='')
        data = pytrends.interest_over_time()
        if not data.empty:
            # 1개월 평균 계산
            trend_data = data[keyword].rolling(window=30).mean()
            return trend_data
    except Exception as e:
        print(f"Error fetching trend data for {keyword}: {e}")
        return None

# FRED 데이터 수집 및 평활화 처리
def fetch_fred_data(series_code, api_key):
    try:
        fred_data = pdr.DataReader(series_code, 'fred', start='2021-01-01', end='2024-01-01', api_key=api_key)
        
        # 발표 주기별 증감율 계산
        freq = pd.infer_freq(fred_data.index)
        if freq == 'M':  # 월간 데이터
            fred_data = fred_data.pct_change(1) * 100
        elif freq == 'Q':  # 분기 데이터
            fred_data = fred_data.pct_change(1) * 100
        elif freq == 'A':  # 연간 데이터
            fred_data = fred_data.pct_change(1) * 100
        else:
            fred_data = fred_data.pct_change(1) * 100  # 기본적으로 이전 주기 대비 증감율 계산

        # 일간 데이터로 평활화
        fred_data = fred_data.resample('D').interpolate(method='linear')

        return fred_data
    except Exception as e:
        print(f"Error fetching FRED data for {series_code}: {e}")
        return None

# Gold price 데이터는 FDR로 가져오기
def fetch_gold_price():
    try:
        gold_data = fdr.DataReader('GOLD', '2021-01-01', '2024-01-01')['Close']
        # 1개월 증감율 계산 (FRED 데이터와 일관성 유지)
        gold_data = gold_data.pct_change(30) * 100
        return gold_data
    except Exception as e:
        print(f"Error fetching gold prices from FDR: {e}")
        return None

# 최근 3개월 상승 추세 강도 계산
def calculate_trend_strength(trend_data):
    last_3_months = trend_data[-90:]  # 최근 3개월 데이터
    trend_strength = np.polyfit(np.arange(len(last_3_months)), last_3_months, 1)[0]  # 선형 회귀의 기울기 계산
    return trend_strength

# 키워드와 FRED 시리즈 매핑
keywords_fred_mapping = {
    "Unemployment rate": "UNRATE",                # 실업률
    "Inflation rate": "CPIAUCSL",                 # 소비자 물가 지수 (CPI)
    "Interest rates": "DGS10",                    # 10년 만기 국채 수익률
    "GDP growth": "GDPC1",                        # 국내총생산 (실질 GDP)
    "Retail sales": "RSAFS",                      # 소매 판매
    "Consumer confidence": "UMCSENT",             # 소비자 신뢰 지수
    "Jobless claims": "ICSA",                     # 실업 수당 청구 건수
    "Crude oil prices": "DCOILWTICO",             # 서부 텍사스 중질유 (WTI) 가격
    "Housing starts": "HOUST",                    # 신규 주택 착공 건수
    "Industrial production": "INDPRO",            # 산업 생산 지수
    "M2 Money Supply": "M2SL",                    # M2 통화 공급량
    "Personal Consumption Expenditures": "PCE",   # 개인 소비 지출
    "Corporate Profits": "CP",                    # 기업 이익
    "Federal Funds Rate": "FEDFUNDS",             # 연방기금금리
    "Durable Goods Orders": "DGORDER",            # 내구재 주문
    "Nonfarm Payrolls": "PAYEMS",                 # 비농업 부문 고용 인원
    "Chicago PMI": "PCUOMFG",                     # 시카고 구매 관리자 지수
    "Consumer Credit": "TOTALSL",                 # 소비자 신용
    "Construction Spending": "TTLCONS",           # 건설 지출
    "Vehicle Sales": "TOTALSA",                   # 차량 판매
    "ISM Manufacturing Index": "NAPM",            # ISM 제조업 지수
    "ISM Non-Manufacturing Index": "NAPMNMI",     # ISM 비제조업 지수
    "Business Inventories": "BUSINV",             # 사업체 재고
    "Capacity Utilization": "TCU",                # 설비 가동률
    "Productivity": "OPHNFB",                     # 노동 생산성
    "Total Business Sales": "CMRMTSPL",           # 전체 사업 매출
    "Exports": "EXPOR",                           # 수출
    "Imports": "IMPOR",                           # 수입
    "Real Disposable Income": "DSPIC96"           # 실질 가처분 소득
}

# FDR을 사용하여 SPY 주가 데이터 가져오기
spy_data = fdr.DataReader('SPY', '2021-01-01', '2024-01-01')['Close']

# 데이터 수집
trends_data = {}
fred_data = {}
trend_strengths = {}

# 병렬로 Google Trends 및 FRED 데이터 수집
with ThreadPoolExecutor(max_workers=5) as executor:
    future_to_keyword = {executor.submit(fetch_trend_data, keyword): keyword for keyword in keywords_fred_mapping}
    future_to_fred = {executor.submit(fetch_fred_data, fred_code, fred_api_key): (keyword, fred_code)
                      for keyword, fred_code in keywords_fred_mapping.items()}
    future_gold_price = executor.submit(fetch_gold_price)

    # Google Trends 데이터 수집
    for future in as_completed(future_to_keyword):
        keyword = future_to_keyword[future]
        trend_data = future.result()
        if trend_data is not None:
            trends_data[keyword] = trend_data
            # 최근 3개월 트렌드 강도 계산
            trend_strengths[keyword] = calculate_trend_strength(trend_data)

    # FRED 데이터 수집
    for future in as_completed(future_to_fred):
        keyword, fred_code = future_to_fred[future]
        fred_series = future.result()
        if fred_series is not None:
            # Google Trends 데이터와 시계열 일치
            fred_series = fred_series.reindex(trends_data[keyword].index, method='ffill').dropna()
            fred_data[keyword] = fred_series
        else:
            print(f"Failed to fetch FRED data for {keyword} ({fred_code}).")

    # Gold price 데이터 수집 (FDR)
    gold_prices = future_gold_price.result()
    if gold_prices is not None:
        gold_prices = gold_prices.reindex(trends_data['Crude oil prices'].index, method='ffill').dropna()
        fred_data["Gold prices"] = gold_prices

# 트렌드 강도 순으로 키워드 정렬
sorted_keywords = sorted(trend_strengths, key=trend_strengths.get, reverse=True)


# Dash 앱 설정
app = Dash(__name__)

# 레이아웃 구성
app.layout = html.Div([
    html.Div([
        dcc.Graph(
            id=f'comparison-graph-{keyword.replace(" ", "-")}',
            figure={
                'data': [
                    go.Scatter(
                        x=trends_data[keyword].index,
                        y=trends_data[keyword],
                        mode='lines',
                        name=f'{keyword} - Google Trends (1개월 평균)',
                        yaxis='y1'  # 기본 y 축에 배치
                    ),
                    go.Scatter(
                        x=fred_data[keyword].index,
                        y=fred_data[keyword].iloc[:, 0],
                        mode='lines',
                        name=f'{keyword} - FRED (평활화)',
                        yaxis='y2'  # 두 번째 y 축에 배치
                    )
                ],
                'layout': go.Layout(
                    title=f'{keyword} - Google Trends vs FRED Data',
                    xaxis={'title': 'Date'},
                    yaxis={'title': 'Google Trends (1개월 평균)', 'side': 'left'},
                    yaxis2={'title': 'FRED (평활화)', 'overlaying': 'y', 'side': 'right'},  # 오른쪽에 두 번째 y 축 추가
                    width=800,  # 그래프의 가로 크기
                    height=400,  # 그래프의 세로 크기
                    annotations=[
                        dict(
                            x=0.5,
                            y=0.5,
                            xref='paper',
                            yref='paper',
                            text='by Covenant',
                            showarrow=False,
                            font=dict(size=40, color='rgba(0, 0, 0, 0.1)'),  # 희미한 음영 설정
                            opacity=0.9
                        )
                    ]
                )
            },
            style={'width': '75%', 'margin': 'auto'}
        )
    ]) for keyword in sorted_keywords if keyword in fred_data
])


# 앱 실행
if __name__ == '__main__':
    app.run_server(debug=False, host='0.0.0.0')

    #http://192.168.219.101:8050
