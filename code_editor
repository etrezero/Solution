import dash
from dash import dcc, html, Input, Output, State
import openai
import subprocess
import traceback
import tempfile

# OpenAI API 키 설정 (사용자의 API 키를 입력하세요)
openai.api_key = 'sk-'



# Dash 앱 초기화
app = dash.Dash(__name__, suppress_callback_exceptions=True)

# Monaco Editor + CSS + JavaScript 추가
monaco_editor_html = """
<!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.0/min/vs/loader.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: white;
            margin: 0;
            padding: 0;
        }
        .container {
            width: 80%;
            margin: 20px auto;
            background: #2e2e2e;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.1);
        }
        .editor-container {
            width: 100%;
            height: 300px;
            border: 1px solid #444;
            border-radius: 5px;
        }
        .btn {
            display: block;
            width: 150px;
            padding: 10px;
            text-align: center;
            margin: 20px auto;
            background: #0078D7;
            color: white;
            font-size: 18px;
            border-radius: 5px;
            transition: 0.3s;
            cursor: pointer;
        }
        .btn:hover {
            background: #005a9e;
        }
        .btn:disabled {
            background: #444;
            cursor: not-allowed;
        }
        #output-container {
            background: #ffffff;
            color: #000000;
            padding: 10px;
            border-radius: 5px;
            white-space: pre-wrap;
            font-size: 16px;
        }
        .loader {
            display: none;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #0078D7;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            margin: 10px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Python Monaco Editor</h2>
        <div id="editor" class="editor-container"></div>
        <div id="run-button" class="btn" onclick="sendCodeToDash()">실행</div>
        <div class="loader" id="loading"></div>
        <h3>실행 결과:</h3>
        <div id="output-container"></div>
        <h3>수정된 코드:</h3>
        <div id="fixed-editor" class="editor-container"></div>
    </div>

    <script>
        var editor, fixedEditor;
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.0/min/vs' }});
        require(["vs/editor/editor.main"], function () {
            editor = monaco.editor.create(document.getElementById("editor"), {
                value: "# 여기에 Python 코드를 입력하세요.\\nprint('Hello, Dash!')",
                language: "python",
                theme: "vs-dark",
                fontSize: 16
            });

            fixedEditor = monaco.editor.create(document.getElementById("fixed-editor"), {
                value: "# 수정된 코드가 여기에 표시됩니다.",
                language: "python",
                theme: "vs-dark",
                fontSize: 16
            });
        });

        function sendCodeToDash() {
            var code = editor.getValue();
            document.getElementById("run-button").innerText = "실행 중...";
            document.getElementById("run-button").disabled = true;
            document.getElementById("loading").style.display = "block";
            fetch('/execute', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({'code': code})
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById("output-container").innerText = data.output;
                fixedEditor.setValue(data.fixed_code);
                document.getElementById("run-button").innerText = "실행";
                document.getElementById("run-button").disabled = false;
                document.getElementById("loading").style.display = "none";
            });
        }
    </script>
</body>
</html>
"""

# Dash 앱 레이아웃
app.layout = html.Div(
    children=[
        html.Iframe(
            srcDoc=monaco_editor_html,
            style={"width": "100%", "height": "850px", "border": "none"}
        ),
        dcc.Store(id="store-code")  # 저장소 추가 (필수)
    ],
    style={
        "width": "70%",
        "margin": "0 auto",
        "backgroundColor": "#1e1e1e"
    }
)

# API 엔드포인트 추가 (실행 요청 처리)
@app.server.route('/execute', methods=['POST'])
def execute_code():
    from flask import request, jsonify

    data = request.get_json()
    code = data.get("code", "")

    if not code:
        return jsonify({"output": "Python 코드를 입력하세요.", "fixed_code": ""})

    try:
        # 임시 파일을 생성하여 코드를 실행
        with tempfile.NamedTemporaryFile(delete=False, suffix=".py") as temp_file:
            temp_file.write(code.encode("utf-8"))
            temp_file_path = temp_file.name

        # Python 코드 실행
        result = subprocess.run(
            ["python", temp_file_path],
            capture_output=True,
            text=True
        )

        # 실행 결과를 반환
        if result.stderr:
            raise Exception(result.stderr)

        return jsonify({"output": result.stdout, "fixed_code": ""})

    except Exception as e:
        # 오류 발생 시 OpenAI API 요청하여 수정 코드 받기
        error_trace = traceback.format_exc()

        prompt = f"""
        다음 Python 코드 실행 중 오류가 발생했습니다. 오류를 수정한 코드를 제공해주세요.

        오류 메시지:
        {error_trace}

        원래 코드:
        {code}
        """

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are an expert Python developer. Respond ONLY with the full corrected Python script. Do not include explanations or additional text."},
                {"role": "user", "content": prompt}
            ]
        )

        fixed_code = response["choices"][0]["message"]["content"]

        return jsonify({"output": error_trace, "fixed_code": fixed_code})


# 앱 실행
if __name__ == "__main__":
    app.run_server(host="0.0.0.0", debug=False)
